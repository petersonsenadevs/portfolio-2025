---
---
<button
  id="theme-select"
  class="z-50 inline-flex items-center justify-center w-10 h-10 p-2 rounded-lg bg-[color:var(--color-background-alt)] hover:[color:var(--color-primary)] hover:border-1 transition-colors"
  aria-label="Toggle theme"
>
  <!-- Sun icon (light) -->
  <svg class="w-5 h-5 light-icon text-text" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
  </svg>
  <!-- Moon icon (dark) -->
  <svg class="w-5 h-5 hidden dark-icon text-text" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
  </svg>
  <!-- Monitor icon (system) -->
  <svg class="w-5 h-5 hidden system-icon text-text" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
  </svg>
</button>

<script>
  const themeButton = document.getElementById('theme-select');
  const lightIcon = document.querySelector('.light-icon');
  const darkIcon = document.querySelector('.dark-icon');
  const systemIcon = document.querySelector('.system-icon');
  
  const themes = ['light', 'dark', 'system'];
  let currentThemeIndex = themes.indexOf(localStorage.getItem('theme') || 'system');
  if (currentThemeIndex === -1) currentThemeIndex = 2; // default to system

  function updateIcon() {
    lightIcon?.classList.add('hidden');
    darkIcon?.classList.add('hidden');
    systemIcon?.classList.add('hidden');

    switch(themes[currentThemeIndex]) {
      case 'light':
        lightIcon?.classList.remove('hidden');
        break;
      case 'dark':
        darkIcon?.classList.remove('hidden');
        break;
      case 'system':
        systemIcon?.classList.remove('hidden');
        break;
    }
  }

  function applyTheme(theme: string) {
    document.documentElement.setAttribute('data-theme', theme);
    
    if (theme === 'system') {
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    } else if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  // Initial setup
  updateIcon();
  applyTheme(themes[currentThemeIndex]);

  themeButton?.addEventListener('click', () => {
    currentThemeIndex = (currentThemeIndex + 1) % themes.length;
    const newTheme = themes[currentThemeIndex];
    localStorage.setItem('theme', newTheme);
    updateIcon();
    applyTheme(newTheme);
  });

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    if (themes[currentThemeIndex] === 'system') {
      applyTheme('system');
    }
  });
</script>