---
import ThemeToggle from "./ThemeToggle.astro";
import LanguageToggle from "./LanguageToggle.astro";
import {translations} from "../i18n/translations";


const navItems = [
  { href: 'home', text: { es: translations.navigation.home.es, en: translations.navigation.home.en } },
  { href: 'about', text: { es: translations.navigation.about.es, en: translations.navigation.about.en  } },
  { href: 'services', text: { es: translations.navigation.services.es, en: translations.navigation.services.en } },
  { href: 'projects', text: { es: translations.navigation.projects.es, en: translations.navigation.projects.en } },
  { href: 'skills', text: { es: translations.navigation.skills.es, en: translations.navigation.skills.en } },
  { href: 'contact', text: { es: translations.navigation.contact.es, en: translations.navigation.contact.en} },
];


---

<nav class="fixed top-0 left-0 w-full bg-background/5 backdrop-blur-sm z-50">
  <div class="max-w-7xl mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="/">
        <span class="text-xl font-bold  hover:text-[color:var(--color-primary)]">Peterson Sena</span>
        </a>
      </div>

      <!-- Desktop Menu -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-4">
          {navItems.map((item) => (
            <button
              data-section={item.href}
              class="nav-link px-3 py-2 rounded-md text-sm font-medium text-[color:var(--color-primary)] hover:text-[color:var(--color-text)] transition-colors duration-300"
            >
              <span class="en">{item.text.es}</span>
              <span class="es hidden">{item.text.en}</span>
            </button>
          ))}
        </div>
      </div>

      <!-- Theme and Language Toggles -->
      <div class="flex items-center gap-2">
        <ThemeToggle />
        <LanguageToggle />
       
        <!-- Mobile menu button -->
        <button
          type="button"
          id="mobile-menu-button"
          class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-text hover:text-[color:var(--color-primary)] transition-colors duration-300"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <svg
            class="block h-6 w-6"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"
            />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="hidden md:hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 bg-background">
      {navItems.map((item) => (
        <button
          data-section={item.href}
          class="nav-link block w-full text-left px-3 py-2 rounded-md text-base font-medium hover:text-[color:var(--color-primary)] transition-colors duration-300"
        >
          <span class="en">{item.text.es}</span>
          <span class="es hidden">{item.text.en}</span>
        </button>
      ))}
    </div>
  </div>
</nav>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  let isMenuOpen = false;

  mobileMenuButton?.addEventListener('click', () => {
    isMenuOpen = !isMenuOpen;
    if (isMenuOpen) {
      mobileMenu?.classList.remove('hidden');
    } else {
      mobileMenu?.classList.add('hidden');
    }
  });

  // Smooth scroll navigation
  document.querySelectorAll('.nav-link').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const sectionId = (e.currentTarget as HTMLElement).dataset.section;
      const section = document.getElementById(sectionId!);
      
      if (section) {
        // Close mobile menu if open
        if (isMenuOpen) {
          mobileMenu?.classList.add('hidden');
          isMenuOpen = false;
        }

        // Smooth scroll to section
        section.scrollIntoView({ behavior: 'smooth' });
      }
    });
  });

  // Update active section on scroll
  const sections = document.querySelectorAll('section[id]');
  const navLinks = document.querySelectorAll('.nav-link');

  function updateActiveSection() {
    const scrollPosition = window.scrollY + 100; // Offset for fixed header

    sections.forEach(section => {
      const sectionTop = (section as HTMLElement).offsetTop;
      const sectionHeight = section.clientHeight;
      const sectionId = section.getAttribute('id');

      if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
        navLinks.forEach(link => {
          link.classList.remove('text-primary-light', 'dark:text-primary-dark');
          if (link.getAttribute('data-section') === sectionId) {
            link.classList.add('text-primary-light', 'dark:text-primary-dark');
          }
        });
      }
    });
  }

  // Update active section on scroll
  window.addEventListener('scroll', updateActiveSection);
  // Initial update
  updateActiveSection();
</script>